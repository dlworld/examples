--- block/qcow2.c.bak   2016-09-29 05:35:43.606794964 -0400
+++ block/qcow2.c       2016-09-27 22:38:34.707892544 -0400
@@ -37,6 +37,8 @@
 #include "qemu/option_int.h"
 #include "qemu/cutils.h"

+#define DEBUG_EXT 1
+
 /*
   Differences with QCOW:

@@ -1405,6 +1407,15 @@ static coroutine_fn int qcow2_co_readv(B

         index_in_cluster = sector_num & (s->cluster_sectors - 1);

+#ifdef DEBUG_EXT
+       static int header_flag = 1;
+       if (header_flag) {
+               printf("========qcow2_pread:\nsector_num cluster-offset length type\n");
+               header_flag = 0;
+       }
+       printf("0x%016lx 0x%016lx %08d %08d\n", sector_num, cluster_offset, remaining_sectors, ret);
+#endif
+
         qemu_iovec_reset(&hd_qiov);
         qemu_iovec_concat(&hd_qiov, qiov, bytes_done,
             cur_nr_sectors * 512);
@@ -2808,6 +2819,37 @@ static int l2_load(BlockDriverState *bs,
        return qcow2_cache_get(bs, s->l2_table_cache, l2_offset, (void **)l2_table);
 }

+static void dump_l1_table(BlockDriverState *bs)
+{
+    BDRVQcow2State *s = bs->opaque;
+    uint64_t l1_entry, l2_entry, l2_offset, *l2_table;
+    int k, k1, l1_size = 16;
+
+    if (s->l1_size < l1_size)
+       l1_size = (int)s->l1_size;
+
+    for(k = 0; k < l1_size; k++) {
+       l1_entry = s->l1_table[k];
+       printf("l1 entry %d: 0x%lx\n", k, l1_entry);
+
+       l2_offset = s->l1_table[k] & L1E_OFFSET_MASK;
+       if (!l2_offset) {
+           printf(" cluster unallocated\n");
+           continue;
+       }
+
+       l2_load(bs, l2_offset, &l2_table);
+       for(k1 = 0; k1 < s->l2_size; k1++) {
+           l2_entry = be64_to_cpu(l2_table[k1]);
+           if (!l2_entry) {
+               continue;
+           }
+           printf("  l2 entry %d: 0x%lx\n", k1, l2_entry);
+       }
+    }
+                       
+}
+
 static ImageInfoSpecific *qcow2_get_specific_info(BlockDriverState *bs)
 {
     BDRVQcow2State *s = bs->opaque;
@@ -2839,6 +2881,11 @@ static ImageInfoSpecific *qcow2_get_spec
         assert(false);
     }

+#ifdef DEBUG_EXT
+    printf("l1_offset 0x%lx, l1_size %d.\n", (unsigned long)s->l1_table_offset, s->l1_size);   
+    dump_l1_table(bs);
+#endif
+
     return spec_info;
 }

